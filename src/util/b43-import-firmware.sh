#!/bin/bash
# Copyright 2018-2020 Michael Bazzinotti <bazz@bazz1.com>
#
# Imports b43 firmware files and generates the C b43_fw module
#
# Arguments
#  You can supply a directory containing the firmware as the first
#  argument. Otherwise the firmware will be searched from a default
#  location.
#

### PREP ###

# C Templates for the b43_fw module. All embed code is inspired from
# image/embedded.c. The purpose is to embed the fw binary itself rather
# than generate bloaty hex C include files. There's lots of firmware for
# b43, so let's not waste bytes.

generated_notice=\
"/*
 * Generated by: ${0}
 */
"

# The Header File
#
#
header_top=\
'#ifndef B43_FW_H_
#define B43_FW_H_

#include "b43.h"

#define B43_EMBED( _name ) \
extern const struct b43_linux_firmware b43_fw_ ## _name;
'

header_bottom=\
'#undef B43_EMBED

#endif
'

source_top=\
'/*

  Broadcom B43 wireless driver

  Firmware Embedding Code for iPXE
  Copyright (c) 2020 Michael Bazzinotti <bazz@bazz1.com>

*/

#include "b43.h"

#undef B43_EMBED
#define B43_EMBED( _name, _path )					\
	extern char b43_fw_ ## _name ## _data[];		\
	extern char b43_fw_ ## _name ## _len[];		\
	__asm__ ( ".section \".rodata\", \"a\", " PROGBITS "\n\t"	\
		  "\nb43_fw_" #_name "_data:\n\t"		\
		  ".incbin \"" _path "\"\n\t"				\
		  "\nb43_fw_" #_name "_end:\n\t"		\
		  ".equ b43_fw_" #_name "_len, "		\
			"( b43_fw_" #_name "_end - "		\
			"  b43_fw_" #_name "_data )\n\t"	\
		  ".previous\n\t" );
'

source_mid=\
'#undef B43_EMBED
#define B43_EMBED( _name ) \
	const struct b43_linux_firmware b43_fw_ ## _name = {	\
		.data = ( const u8 * ) ( b43_fw_ ## _name ## _data ),	\
		.size = ( size_t ) b43_fw_ ## _name ## _len,		\
	};

'

# internal function
# Chop off the 2nd argument from each item in the embed list ($1),
# and append to specified file ($2)
function choppend() {
	local embeds="$1"
		local destfile="$2"
		while IFS= read -r line; do
			[ -z "$line" ] || echo "${line%,*} )" >> "$destfile"
				done <<<"${embeds}"
}

######
######### END PREP #########
######

# Get a relative path from the script location (anticipated to be in
# src/util). Then use readlink to turn that into a hopefully less ugly
# abs path.
ipxe_b43_dir="$(readlink -f ${0%/*}/../drivers/net/b43)"
[ -z "${ipxe_b43_dir}" ] && echo \
     "The ipxe b43 driver directory is missing!" && exit 1

fw_dstdir="${ipxe_b43_dir}/fw"

# Grab unique firmware filenames from ipxe b43 driver source
if [ -z "$1" ]; then
# We weren't given a fw directory, use the default
	fw_srcdir="/lib/firmware/b43"
# Todo: if we want to use multiple possible fw directories to check, we'll
# need to iterate through them here.
else
	fw_srcdir="$1"
fi

# Parse b43_main.c for firmware names
file="${ipxe_b43_dir}/b43_main.c"
[ -z "$file" ] && echo -e "Could not find the ipxe b43 file: $file" \
               && exit 1

names=$(grep 'blob = &' "$file" |
		sed 's/^.*blob = &b43_fw_\(.*\);.*$/\1/g' | uniq)

mkdir -p "${fw_dstdir}"
pushd "${fw_srcdir}" # goto fw dir because path to fw affects xxd symbol output

# This will hold all of the EMBED macro invocations for each fw file
embeds=""

for name in $names; do
	srcfile="${name}.fw"
	filename="${fw_dstdir}/${name}.fw"
	if [ -e ${srcfile} ]; then
		echo "${srcfile}"
		cp "${srcfile}" "${filename}"
	else
    echo "Missing ${srcfile}, writing stub"
		touch "${filename}"
  fi

	embeds="${embeds}B43_EMBED ( ${name}, \"drivers/net/b43/fw/${name}.fw\" )
"

done
popd

# Write the b43_fw C module files
pushd "${fw_dstdir}/.."
HEADER="b43_fw.h"
SRC="b43_fw.c"
echo "${generated_notice}" > $SRC
echo "${source_top}" >> $SRC
echo "${embeds}" >> $SRC
echo "${source_mid}" >> $SRC
choppend "${embeds}" "${SRC}"

echo "${generated_notice}" > $HEADER
echo "${header_top}" >> $HEADER
choppend "${embeds}" "${HEADER}"
echo "${header_bottom}" >> $HEADER
